// Code generated by MockGen. DO NOT EDIT.
// Source: databaseiface.go

// Package mock_db is a generated GoMock package.
package db

import (
	"context"
	badgerTrie "github.com/MadBase/MadNet/badgerTrie"
	objs "github.com/MadBase/MadNet/consensus/objs"
	v2 "github.com/dgraph-io/badger/v2"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDatabaseIface is a mock of DatabaseIface interface
type MockDatabaseIface struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseIfaceMockRecorder
}

// MockDatabaseIfaceMockRecorder is the mock recorder for MockDatabaseIface
type MockDatabaseIfaceMockRecorder struct {
	mock *MockDatabaseIface
}

// NewMockDatabaseIface creates a new mock instance
func NewMockDatabaseIface(ctrl *gomock.Controller) *MockDatabaseIface {
	mock := &MockDatabaseIface{ctrl: ctrl}
	mock.recorder = &MockDatabaseIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseIface) EXPECT() *MockDatabaseIfaceMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockDatabaseIface) Init(DB *v2.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", DB)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockDatabaseIfaceMockRecorder) Init(DB interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockDatabaseIface)(nil).Init), DB)
}

// DB mocks base method
func (m *MockDatabaseIface) DB() *v2.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*v2.DB)
	return ret0
}

// DB indicates an expected call of DB
func (mr *MockDatabaseIfaceMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockDatabaseIface)(nil).DB))
}

// View mocks base method
func (m *MockDatabaseIface) View(fn TxnFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "View", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// View indicates an expected call of View
func (mr *MockDatabaseIfaceMockRecorder) View(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "View", reflect.TypeOf((*MockDatabaseIface)(nil).View), fn)
}

// Update mocks base method
func (m *MockDatabaseIface) Update(fn TxnFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDatabaseIfaceMockRecorder) Update(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDatabaseIface)(nil).Update), fn)
}

// Sync mocks base method
func (m *MockDatabaseIface) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync
func (mr *MockDatabaseIfaceMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockDatabaseIface)(nil).Sync))
}

// GarbageCollect mocks base method
func (m *MockDatabaseIface) GarbageCollect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GarbageCollect")
	ret0, _ := ret[0].(error)
	return ret0
}

// GarbageCollect indicates an expected call of GarbageCollect
func (mr *MockDatabaseIfaceMockRecorder) GarbageCollect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GarbageCollect", reflect.TypeOf((*MockDatabaseIface)(nil).GarbageCollect))
}

// SetEncryptedStore mocks base method
func (m *MockDatabaseIface) SetEncryptedStore(txn *v2.Txn, v *objs.EncryptedStore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEncryptedStore", txn, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEncryptedStore indicates an expected call of SetEncryptedStore
func (mr *MockDatabaseIfaceMockRecorder) SetEncryptedStore(txn, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEncryptedStore", reflect.TypeOf((*MockDatabaseIface)(nil).SetEncryptedStore), txn, v)
}

// GetEncryptedStore mocks base method
func (m *MockDatabaseIface) GetEncryptedStore(txn *v2.Txn, name []byte) (*objs.EncryptedStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncryptedStore", txn, name)
	ret0, _ := ret[0].(*objs.EncryptedStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncryptedStore indicates an expected call of GetEncryptedStore
func (mr *MockDatabaseIfaceMockRecorder) GetEncryptedStore(txn, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptedStore", reflect.TypeOf((*MockDatabaseIface)(nil).GetEncryptedStore), txn, name)
}

// SetCurrentRoundState mocks base method
func (m *MockDatabaseIface) SetCurrentRoundState(txn *v2.Txn, v *objs.RoundState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentRoundState", txn, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrentRoundState indicates an expected call of SetCurrentRoundState
func (mr *MockDatabaseIfaceMockRecorder) SetCurrentRoundState(txn, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentRoundState", reflect.TypeOf((*MockDatabaseIface)(nil).SetCurrentRoundState), txn, v)
}

// GetCurrentRoundState mocks base method
func (m *MockDatabaseIface) GetCurrentRoundState(txn *v2.Txn, vaddr []byte) (*objs.RoundState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentRoundState", txn, vaddr)
	ret0, _ := ret[0].(*objs.RoundState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentRoundState indicates an expected call of GetCurrentRoundState
func (mr *MockDatabaseIfaceMockRecorder) GetCurrentRoundState(txn, vaddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentRoundState", reflect.TypeOf((*MockDatabaseIface)(nil).GetCurrentRoundState), txn, vaddr)
}

// SetHistoricRoundState mocks base method
func (m *MockDatabaseIface) SetHistoricRoundState(txn *v2.Txn, v *objs.RoundState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHistoricRoundState", txn, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHistoricRoundState indicates an expected call of SetHistoricRoundState
func (mr *MockDatabaseIfaceMockRecorder) SetHistoricRoundState(txn, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHistoricRoundState", reflect.TypeOf((*MockDatabaseIface)(nil).SetHistoricRoundState), txn, v)
}

// GetHistoricRoundState mocks base method
func (m *MockDatabaseIface) GetHistoricRoundState(txn *v2.Txn, vaddr []byte, height, round uint32) (*objs.RoundState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoricRoundState", txn, vaddr, height, round)
	ret0, _ := ret[0].(*objs.RoundState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoricRoundState indicates an expected call of GetHistoricRoundState
func (mr *MockDatabaseIfaceMockRecorder) GetHistoricRoundState(txn, vaddr, height, round interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoricRoundState", reflect.TypeOf((*MockDatabaseIface)(nil).GetHistoricRoundState), txn, vaddr, height, round)
}

// DeleteBeforeHistoricRoundState mocks base method
func (m *MockDatabaseIface) DeleteBeforeHistoricRoundState(txn *v2.Txn, height uint32, maxnum int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBeforeHistoricRoundState", txn, height, maxnum)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBeforeHistoricRoundState indicates an expected call of DeleteBeforeHistoricRoundState
func (mr *MockDatabaseIfaceMockRecorder) DeleteBeforeHistoricRoundState(txn, height, maxnum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBeforeHistoricRoundState", reflect.TypeOf((*MockDatabaseIface)(nil).DeleteBeforeHistoricRoundState), txn, height, maxnum)
}

// SetValidatorSet mocks base method
func (m *MockDatabaseIface) SetValidatorSet(txn *v2.Txn, v *objs.ValidatorSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidatorSet", txn, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidatorSet indicates an expected call of SetValidatorSet
func (mr *MockDatabaseIfaceMockRecorder) SetValidatorSet(txn, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidatorSet", reflect.TypeOf((*MockDatabaseIface)(nil).SetValidatorSet), txn, v)
}

// GetValidatorSet mocks base method
func (m *MockDatabaseIface) GetValidatorSet(txn *v2.Txn, height uint32) (*objs.ValidatorSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorSet", txn, height)
	ret0, _ := ret[0].(*objs.ValidatorSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorSet indicates an expected call of GetValidatorSet
func (mr *MockDatabaseIfaceMockRecorder) GetValidatorSet(txn, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorSet", reflect.TypeOf((*MockDatabaseIface)(nil).GetValidatorSet), txn, height)
}

// MakeHeaderTrieKeyFromHeight mocks base method
func (m *MockDatabaseIface) MakeHeaderTrieKeyFromHeight(height uint32) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeHeaderTrieKeyFromHeight", height)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// MakeHeaderTrieKeyFromHeight indicates an expected call of MakeHeaderTrieKeyFromHeight
func (mr *MockDatabaseIfaceMockRecorder) MakeHeaderTrieKeyFromHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeHeaderTrieKeyFromHeight", reflect.TypeOf((*MockDatabaseIface)(nil).MakeHeaderTrieKeyFromHeight), height)
}

// GetHeaderTrieRoot mocks base method
func (m *MockDatabaseIface) GetHeaderTrieRoot(txn *v2.Txn, height uint32) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderTrieRoot", txn, height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderTrieRoot indicates an expected call of GetHeaderTrieRoot
func (mr *MockDatabaseIfaceMockRecorder) GetHeaderTrieRoot(txn, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderTrieRoot", reflect.TypeOf((*MockDatabaseIface)(nil).GetHeaderTrieRoot), txn, height)
}

// UpdateHeaderTrieRootFastSync mocks base method
func (m *MockDatabaseIface) UpdateHeaderTrieRootFastSync(txn *v2.Txn, v *objs.BlockHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHeaderTrieRootFastSync", txn, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHeaderTrieRootFastSync indicates an expected call of UpdateHeaderTrieRootFastSync
func (mr *MockDatabaseIfaceMockRecorder) UpdateHeaderTrieRootFastSync(txn, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHeaderTrieRootFastSync", reflect.TypeOf((*MockDatabaseIface)(nil).UpdateHeaderTrieRootFastSync), txn, v)
}

// SetCommittedBlockHeader mocks base method
func (m *MockDatabaseIface) SetCommittedBlockHeader(txn *v2.Txn, v *objs.BlockHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCommittedBlockHeader", txn, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCommittedBlockHeader indicates an expected call of SetCommittedBlockHeader
func (mr *MockDatabaseIfaceMockRecorder) SetCommittedBlockHeader(txn, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommittedBlockHeader", reflect.TypeOf((*MockDatabaseIface)(nil).SetCommittedBlockHeader), txn, v)
}

// SetCommittedBlockHeaderFastSync mocks base method
func (m *MockDatabaseIface) SetCommittedBlockHeaderFastSync(txn *v2.Txn, v *objs.BlockHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCommittedBlockHeaderFastSync", txn, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCommittedBlockHeaderFastSync indicates an expected call of SetCommittedBlockHeaderFastSync
func (mr *MockDatabaseIfaceMockRecorder) SetCommittedBlockHeaderFastSync(txn, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommittedBlockHeaderFastSync", reflect.TypeOf((*MockDatabaseIface)(nil).SetCommittedBlockHeaderFastSync), txn, v)
}

// GetHeaderRootForProposal mocks base method
func (m *MockDatabaseIface) GetHeaderRootForProposal(txn *v2.Txn) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderRootForProposal", txn)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderRootForProposal indicates an expected call of GetHeaderRootForProposal
func (mr *MockDatabaseIfaceMockRecorder) GetHeaderRootForProposal(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderRootForProposal", reflect.TypeOf((*MockDatabaseIface)(nil).GetHeaderRootForProposal), txn)
}

// DeleteCommittedBlockHeader mocks base method
func (m *MockDatabaseIface) DeleteCommittedBlockHeader(txn *v2.Txn, height uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommittedBlockHeader", txn, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommittedBlockHeader indicates an expected call of DeleteCommittedBlockHeader
func (mr *MockDatabaseIfaceMockRecorder) DeleteCommittedBlockHeader(txn, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommittedBlockHeader", reflect.TypeOf((*MockDatabaseIface)(nil).DeleteCommittedBlockHeader), txn, height)
}

// ValidateCommittedBlockHeaderWithProof mocks base method
func (m *MockDatabaseIface) ValidateCommittedBlockHeaderWithProof(txn *v2.Txn, root []byte, blockHeader *objs.BlockHeader, proof []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCommittedBlockHeaderWithProof", txn, root, blockHeader, proof)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateCommittedBlockHeaderWithProof indicates an expected call of ValidateCommittedBlockHeaderWithProof
func (mr *MockDatabaseIfaceMockRecorder) ValidateCommittedBlockHeaderWithProof(txn, root, blockHeader, proof interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCommittedBlockHeaderWithProof", reflect.TypeOf((*MockDatabaseIface)(nil).ValidateCommittedBlockHeaderWithProof), txn, root, blockHeader, proof)
}

// GetCommittedBlockHeaderWithProof mocks base method
func (m *MockDatabaseIface) GetCommittedBlockHeaderWithProof(txn *v2.Txn, root []byte, blockHeight uint32) (*objs.BlockHeader, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittedBlockHeaderWithProof", txn, root, blockHeight)
	ret0, _ := ret[0].(*objs.BlockHeader)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommittedBlockHeaderWithProof indicates an expected call of GetCommittedBlockHeaderWithProof
func (mr *MockDatabaseIfaceMockRecorder) GetCommittedBlockHeaderWithProof(txn, root, blockHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittedBlockHeaderWithProof", reflect.TypeOf((*MockDatabaseIface)(nil).GetCommittedBlockHeaderWithProof), txn, root, blockHeight)
}

// GetCommittedBlockHeader mocks base method
func (m *MockDatabaseIface) GetCommittedBlockHeader(txn *v2.Txn, height uint32) (*objs.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittedBlockHeader", txn, height)
	ret0, _ := ret[0].(*objs.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommittedBlockHeader indicates an expected call of GetCommittedBlockHeader
func (mr *MockDatabaseIfaceMockRecorder) GetCommittedBlockHeader(txn, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittedBlockHeader", reflect.TypeOf((*MockDatabaseIface)(nil).GetCommittedBlockHeader), txn, height)
}

// GetCommittedBlockHeaderByHash mocks base method
func (m *MockDatabaseIface) GetCommittedBlockHeaderByHash(txn *v2.Txn, hash []byte) (*objs.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittedBlockHeaderByHash", txn, hash)
	ret0, _ := ret[0].(*objs.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommittedBlockHeaderByHash indicates an expected call of GetCommittedBlockHeaderByHash
func (mr *MockDatabaseIfaceMockRecorder) GetCommittedBlockHeaderByHash(txn, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittedBlockHeaderByHash", reflect.TypeOf((*MockDatabaseIface)(nil).GetCommittedBlockHeaderByHash), txn, hash)
}

// GetMostRecentCommittedBlockHeaderFastSync mocks base method
func (m *MockDatabaseIface) GetMostRecentCommittedBlockHeaderFastSync(txn *v2.Txn) (*objs.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostRecentCommittedBlockHeaderFastSync", txn)
	ret0, _ := ret[0].(*objs.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostRecentCommittedBlockHeaderFastSync indicates an expected call of GetMostRecentCommittedBlockHeaderFastSync
func (mr *MockDatabaseIfaceMockRecorder) GetMostRecentCommittedBlockHeaderFastSync(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostRecentCommittedBlockHeaderFastSync", reflect.TypeOf((*MockDatabaseIface)(nil).GetMostRecentCommittedBlockHeaderFastSync), txn)
}

// SetOwnState mocks base method
func (m *MockDatabaseIface) SetOwnState(txn *v2.Txn, v *objs.OwnState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOwnState", txn, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOwnState indicates an expected call of SetOwnState
func (mr *MockDatabaseIfaceMockRecorder) SetOwnState(txn, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOwnState", reflect.TypeOf((*MockDatabaseIface)(nil).SetOwnState), txn, v)
}

// GetOwnState mocks base method
func (m *MockDatabaseIface) GetOwnState(txn *v2.Txn) (*objs.OwnState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnState", txn)
	ret0, _ := ret[0].(*objs.OwnState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnState indicates an expected call of GetOwnState
func (mr *MockDatabaseIfaceMockRecorder) GetOwnState(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnState", reflect.TypeOf((*MockDatabaseIface)(nil).GetOwnState), txn)
}

// SetOwnValidatingState mocks base method
func (m *MockDatabaseIface) SetOwnValidatingState(txn *v2.Txn, v *objs.OwnValidatingState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOwnValidatingState", txn, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOwnValidatingState indicates an expected call of SetOwnValidatingState
func (mr *MockDatabaseIfaceMockRecorder) SetOwnValidatingState(txn, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOwnValidatingState", reflect.TypeOf((*MockDatabaseIface)(nil).SetOwnValidatingState), txn, v)
}

// GetOwnValidatingState mocks base method
func (m *MockDatabaseIface) GetOwnValidatingState(txn *v2.Txn) (*objs.OwnValidatingState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnValidatingState", txn)
	ret0, _ := ret[0].(*objs.OwnValidatingState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnValidatingState indicates an expected call of GetOwnValidatingState
func (mr *MockDatabaseIfaceMockRecorder) GetOwnValidatingState(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnValidatingState", reflect.TypeOf((*MockDatabaseIface)(nil).GetOwnValidatingState), txn)
}

// SetBroadcastBlockHeader mocks base method
func (m *MockDatabaseIface) SetBroadcastBlockHeader(txn *v2.Txn, v *objs.BlockHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBroadcastBlockHeader", txn, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBroadcastBlockHeader indicates an expected call of SetBroadcastBlockHeader
func (mr *MockDatabaseIfaceMockRecorder) SetBroadcastBlockHeader(txn, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBroadcastBlockHeader", reflect.TypeOf((*MockDatabaseIface)(nil).SetBroadcastBlockHeader), txn, v)
}

// GetBroadcastBlockHeader mocks base method
func (m *MockDatabaseIface) GetBroadcastBlockHeader(txn *v2.Txn) (*objs.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBroadcastBlockHeader", txn)
	ret0, _ := ret[0].(*objs.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBroadcastBlockHeader indicates an expected call of GetBroadcastBlockHeader
func (mr *MockDatabaseIfaceMockRecorder) GetBroadcastBlockHeader(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBroadcastBlockHeader", reflect.TypeOf((*MockDatabaseIface)(nil).GetBroadcastBlockHeader), txn)
}

// SubscribeBroadcastBlockHeader mocks base method
func (m *MockDatabaseIface) SubscribeBroadcastBlockHeader(ctx context.Context, cb func([]byte) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeBroadcastBlockHeader", ctx, cb)
}

// SubscribeBroadcastBlockHeader indicates an expected call of SubscribeBroadcastBlockHeader
func (mr *MockDatabaseIfaceMockRecorder) SubscribeBroadcastBlockHeader(ctx, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeBroadcastBlockHeader", reflect.TypeOf((*MockDatabaseIface)(nil).SubscribeBroadcastBlockHeader), ctx, cb)
}

// SetBroadcastRCert mocks base method
func (m *MockDatabaseIface) SetBroadcastRCert(txn *v2.Txn, v *objs.RCert) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBroadcastRCert", txn, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBroadcastRCert indicates an expected call of SetBroadcastRCert
func (mr *MockDatabaseIfaceMockRecorder) SetBroadcastRCert(txn, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBroadcastRCert", reflect.TypeOf((*MockDatabaseIface)(nil).SetBroadcastRCert), txn, v)
}

// GetBroadcastRCert mocks base method
func (m *MockDatabaseIface) GetBroadcastRCert(txn *v2.Txn) (*objs.RCert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBroadcastRCert", txn)
	ret0, _ := ret[0].(*objs.RCert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBroadcastRCert indicates an expected call of GetBroadcastRCert
func (mr *MockDatabaseIfaceMockRecorder) GetBroadcastRCert(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBroadcastRCert", reflect.TypeOf((*MockDatabaseIface)(nil).GetBroadcastRCert), txn)
}

// SubscribeBroadcastRCert mocks base method
func (m *MockDatabaseIface) SubscribeBroadcastRCert(ctx context.Context, cb func([]byte) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeBroadcastRCert", ctx, cb)
}

// SubscribeBroadcastRCert indicates an expected call of SubscribeBroadcastRCert
func (mr *MockDatabaseIfaceMockRecorder) SubscribeBroadcastRCert(ctx, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeBroadcastRCert", reflect.TypeOf((*MockDatabaseIface)(nil).SubscribeBroadcastRCert), ctx, cb)
}

// SetBroadcastTransaction mocks base method
func (m *MockDatabaseIface) SetBroadcastTransaction(txn *v2.Txn, v []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBroadcastTransaction", txn, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBroadcastTransaction indicates an expected call of SetBroadcastTransaction
func (mr *MockDatabaseIfaceMockRecorder) SetBroadcastTransaction(txn, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBroadcastTransaction", reflect.TypeOf((*MockDatabaseIface)(nil).SetBroadcastTransaction), txn, v)
}

// SubscribeBroadcastTransaction mocks base method
func (m *MockDatabaseIface) SubscribeBroadcastTransaction(ctx context.Context, cb func([]byte) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeBroadcastTransaction", ctx, cb)
}

// SubscribeBroadcastTransaction indicates an expected call of SubscribeBroadcastTransaction
func (mr *MockDatabaseIfaceMockRecorder) SubscribeBroadcastTransaction(ctx, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeBroadcastTransaction", reflect.TypeOf((*MockDatabaseIface)(nil).SubscribeBroadcastTransaction), ctx, cb)
}

// SetBroadcastProposal mocks base method
func (m *MockDatabaseIface) SetBroadcastProposal(txn *v2.Txn, v *objs.Proposal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBroadcastProposal", txn, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBroadcastProposal indicates an expected call of SetBroadcastProposal
func (mr *MockDatabaseIfaceMockRecorder) SetBroadcastProposal(txn, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBroadcastProposal", reflect.TypeOf((*MockDatabaseIface)(nil).SetBroadcastProposal), txn, v)
}

// GetBroadcastProposal mocks base method
func (m *MockDatabaseIface) GetBroadcastProposal(txn *v2.Txn) (*objs.Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBroadcastProposal", txn)
	ret0, _ := ret[0].(*objs.Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBroadcastProposal indicates an expected call of GetBroadcastProposal
func (mr *MockDatabaseIfaceMockRecorder) GetBroadcastProposal(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBroadcastProposal", reflect.TypeOf((*MockDatabaseIface)(nil).GetBroadcastProposal), txn)
}

// SubscribeBroadcastProposal mocks base method
func (m *MockDatabaseIface) SubscribeBroadcastProposal(ctx context.Context, cb func([]byte) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeBroadcastProposal", ctx, cb)
}

// SubscribeBroadcastProposal indicates an expected call of SubscribeBroadcastProposal
func (mr *MockDatabaseIfaceMockRecorder) SubscribeBroadcastProposal(ctx, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeBroadcastProposal", reflect.TypeOf((*MockDatabaseIface)(nil).SubscribeBroadcastProposal), ctx, cb)
}

// SetBroadcastPreVote mocks base method
func (m *MockDatabaseIface) SetBroadcastPreVote(txn *v2.Txn, v *objs.PreVote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBroadcastPreVote", txn, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBroadcastPreVote indicates an expected call of SetBroadcastPreVote
func (mr *MockDatabaseIfaceMockRecorder) SetBroadcastPreVote(txn, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBroadcastPreVote", reflect.TypeOf((*MockDatabaseIface)(nil).SetBroadcastPreVote), txn, v)
}

// GetBroadcastPreVote mocks base method
func (m *MockDatabaseIface) GetBroadcastPreVote(txn *v2.Txn) (*objs.PreVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBroadcastPreVote", txn)
	ret0, _ := ret[0].(*objs.PreVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBroadcastPreVote indicates an expected call of GetBroadcastPreVote
func (mr *MockDatabaseIfaceMockRecorder) GetBroadcastPreVote(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBroadcastPreVote", reflect.TypeOf((*MockDatabaseIface)(nil).GetBroadcastPreVote), txn)
}

// SubscribeBroadcastPreVote mocks base method
func (m *MockDatabaseIface) SubscribeBroadcastPreVote(ctx context.Context, cb func([]byte) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeBroadcastPreVote", ctx, cb)
}

// SubscribeBroadcastPreVote indicates an expected call of SubscribeBroadcastPreVote
func (mr *MockDatabaseIfaceMockRecorder) SubscribeBroadcastPreVote(ctx, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeBroadcastPreVote", reflect.TypeOf((*MockDatabaseIface)(nil).SubscribeBroadcastPreVote), ctx, cb)
}

// SetBroadcastPreVoteNil mocks base method
func (m *MockDatabaseIface) SetBroadcastPreVoteNil(txn *v2.Txn, v *objs.PreVoteNil) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBroadcastPreVoteNil", txn, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBroadcastPreVoteNil indicates an expected call of SetBroadcastPreVoteNil
func (mr *MockDatabaseIfaceMockRecorder) SetBroadcastPreVoteNil(txn, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBroadcastPreVoteNil", reflect.TypeOf((*MockDatabaseIface)(nil).SetBroadcastPreVoteNil), txn, v)
}

// GetBroadcastPreVoteNil mocks base method
func (m *MockDatabaseIface) GetBroadcastPreVoteNil(txn *v2.Txn) (*objs.PreVoteNil, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBroadcastPreVoteNil", txn)
	ret0, _ := ret[0].(*objs.PreVoteNil)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBroadcastPreVoteNil indicates an expected call of GetBroadcastPreVoteNil
func (mr *MockDatabaseIfaceMockRecorder) GetBroadcastPreVoteNil(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBroadcastPreVoteNil", reflect.TypeOf((*MockDatabaseIface)(nil).GetBroadcastPreVoteNil), txn)
}

// SubscribeBroadcastPreVoteNil mocks base method
func (m *MockDatabaseIface) SubscribeBroadcastPreVoteNil(ctx context.Context, cb func([]byte) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeBroadcastPreVoteNil", ctx, cb)
}

// SubscribeBroadcastPreVoteNil indicates an expected call of SubscribeBroadcastPreVoteNil
func (mr *MockDatabaseIfaceMockRecorder) SubscribeBroadcastPreVoteNil(ctx, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeBroadcastPreVoteNil", reflect.TypeOf((*MockDatabaseIface)(nil).SubscribeBroadcastPreVoteNil), ctx, cb)
}

// SetBroadcastPreCommit mocks base method
func (m *MockDatabaseIface) SetBroadcastPreCommit(txn *v2.Txn, v *objs.PreCommit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBroadcastPreCommit", txn, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBroadcastPreCommit indicates an expected call of SetBroadcastPreCommit
func (mr *MockDatabaseIfaceMockRecorder) SetBroadcastPreCommit(txn, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBroadcastPreCommit", reflect.TypeOf((*MockDatabaseIface)(nil).SetBroadcastPreCommit), txn, v)
}

// GetBroadcastPreCommit mocks base method
func (m *MockDatabaseIface) GetBroadcastPreCommit(txn *v2.Txn) (*objs.PreCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBroadcastPreCommit", txn)
	ret0, _ := ret[0].(*objs.PreCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBroadcastPreCommit indicates an expected call of GetBroadcastPreCommit
func (mr *MockDatabaseIfaceMockRecorder) GetBroadcastPreCommit(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBroadcastPreCommit", reflect.TypeOf((*MockDatabaseIface)(nil).GetBroadcastPreCommit), txn)
}

// SubscribeBroadcastPreCommit mocks base method
func (m *MockDatabaseIface) SubscribeBroadcastPreCommit(ctx context.Context, cb func([]byte) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeBroadcastPreCommit", ctx, cb)
}

// SubscribeBroadcastPreCommit indicates an expected call of SubscribeBroadcastPreCommit
func (mr *MockDatabaseIfaceMockRecorder) SubscribeBroadcastPreCommit(ctx, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeBroadcastPreCommit", reflect.TypeOf((*MockDatabaseIface)(nil).SubscribeBroadcastPreCommit), ctx, cb)
}

// SetBroadcastPreCommitNil mocks base method
func (m *MockDatabaseIface) SetBroadcastPreCommitNil(txn *v2.Txn, v *objs.PreCommitNil) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBroadcastPreCommitNil", txn, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBroadcastPreCommitNil indicates an expected call of SetBroadcastPreCommitNil
func (mr *MockDatabaseIfaceMockRecorder) SetBroadcastPreCommitNil(txn, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBroadcastPreCommitNil", reflect.TypeOf((*MockDatabaseIface)(nil).SetBroadcastPreCommitNil), txn, v)
}

// GetBroadcastPreCommitNil mocks base method
func (m *MockDatabaseIface) GetBroadcastPreCommitNil(txn *v2.Txn) (*objs.PreCommitNil, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBroadcastPreCommitNil", txn)
	ret0, _ := ret[0].(*objs.PreCommitNil)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBroadcastPreCommitNil indicates an expected call of GetBroadcastPreCommitNil
func (mr *MockDatabaseIfaceMockRecorder) GetBroadcastPreCommitNil(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBroadcastPreCommitNil", reflect.TypeOf((*MockDatabaseIface)(nil).GetBroadcastPreCommitNil), txn)
}

// SubscribeBroadcastPreCommitNil mocks base method
func (m *MockDatabaseIface) SubscribeBroadcastPreCommitNil(ctx context.Context, cb func([]byte) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeBroadcastPreCommitNil", ctx, cb)
}

// SubscribeBroadcastPreCommitNil indicates an expected call of SubscribeBroadcastPreCommitNil
func (mr *MockDatabaseIfaceMockRecorder) SubscribeBroadcastPreCommitNil(ctx, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeBroadcastPreCommitNil", reflect.TypeOf((*MockDatabaseIface)(nil).SubscribeBroadcastPreCommitNil), ctx, cb)
}

// SetBroadcastNextHeight mocks base method
func (m *MockDatabaseIface) SetBroadcastNextHeight(txn *v2.Txn, v *objs.NextHeight) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBroadcastNextHeight", txn, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBroadcastNextHeight indicates an expected call of SetBroadcastNextHeight
func (mr *MockDatabaseIfaceMockRecorder) SetBroadcastNextHeight(txn, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBroadcastNextHeight", reflect.TypeOf((*MockDatabaseIface)(nil).SetBroadcastNextHeight), txn, v)
}

// GetBroadcastNextHeight mocks base method
func (m *MockDatabaseIface) GetBroadcastNextHeight(txn *v2.Txn) (*objs.NextHeight, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBroadcastNextHeight", txn)
	ret0, _ := ret[0].(*objs.NextHeight)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBroadcastNextHeight indicates an expected call of GetBroadcastNextHeight
func (mr *MockDatabaseIfaceMockRecorder) GetBroadcastNextHeight(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBroadcastNextHeight", reflect.TypeOf((*MockDatabaseIface)(nil).GetBroadcastNextHeight), txn)
}

// SubscribeBroadcastNextHeight mocks base method
func (m *MockDatabaseIface) SubscribeBroadcastNextHeight(ctx context.Context, cb func([]byte) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeBroadcastNextHeight", ctx, cb)
}

// SubscribeBroadcastNextHeight indicates an expected call of SubscribeBroadcastNextHeight
func (mr *MockDatabaseIfaceMockRecorder) SubscribeBroadcastNextHeight(ctx, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeBroadcastNextHeight", reflect.TypeOf((*MockDatabaseIface)(nil).SubscribeBroadcastNextHeight), ctx, cb)
}

// SetBroadcastNextRound mocks base method
func (m *MockDatabaseIface) SetBroadcastNextRound(txn *v2.Txn, v *objs.NextRound) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBroadcastNextRound", txn, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBroadcastNextRound indicates an expected call of SetBroadcastNextRound
func (mr *MockDatabaseIfaceMockRecorder) SetBroadcastNextRound(txn, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBroadcastNextRound", reflect.TypeOf((*MockDatabaseIface)(nil).SetBroadcastNextRound), txn, v)
}

// GetBroadcastNextRound mocks base method
func (m *MockDatabaseIface) GetBroadcastNextRound(txn *v2.Txn) (*objs.NextRound, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBroadcastNextRound", txn)
	ret0, _ := ret[0].(*objs.NextRound)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBroadcastNextRound indicates an expected call of GetBroadcastNextRound
func (mr *MockDatabaseIfaceMockRecorder) GetBroadcastNextRound(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBroadcastNextRound", reflect.TypeOf((*MockDatabaseIface)(nil).GetBroadcastNextRound), txn)
}

// SubscribeBroadcastNextRound mocks base method
func (m *MockDatabaseIface) SubscribeBroadcastNextRound(ctx context.Context, cb func([]byte) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeBroadcastNextRound", ctx, cb)
}

// SubscribeBroadcastNextRound indicates an expected call of SubscribeBroadcastNextRound
func (mr *MockDatabaseIfaceMockRecorder) SubscribeBroadcastNextRound(ctx, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeBroadcastNextRound", reflect.TypeOf((*MockDatabaseIface)(nil).SubscribeBroadcastNextRound), ctx, cb)
}

// SetSnapshotBlockHeader mocks base method
func (m *MockDatabaseIface) SetSnapshotBlockHeader(txn *v2.Txn, v *objs.BlockHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSnapshotBlockHeader", txn, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSnapshotBlockHeader indicates an expected call of SetSnapshotBlockHeader
func (mr *MockDatabaseIfaceMockRecorder) SetSnapshotBlockHeader(txn, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSnapshotBlockHeader", reflect.TypeOf((*MockDatabaseIface)(nil).SetSnapshotBlockHeader), txn, v)
}

// GetSnapshotBlockHeader mocks base method
func (m *MockDatabaseIface) GetSnapshotBlockHeader(txn *v2.Txn, height uint32) (*objs.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotBlockHeader", txn, height)
	ret0, _ := ret[0].(*objs.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotBlockHeader indicates an expected call of GetSnapshotBlockHeader
func (mr *MockDatabaseIfaceMockRecorder) GetSnapshotBlockHeader(txn, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotBlockHeader", reflect.TypeOf((*MockDatabaseIface)(nil).GetSnapshotBlockHeader), txn, height)
}

// GetLastSnapshot mocks base method
func (m *MockDatabaseIface) GetLastSnapshot(txn *v2.Txn) (*objs.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastSnapshot", txn)
	ret0, _ := ret[0].(*objs.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastSnapshot indicates an expected call of GetLastSnapshot
func (mr *MockDatabaseIfaceMockRecorder) GetLastSnapshot(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastSnapshot", reflect.TypeOf((*MockDatabaseIface)(nil).GetLastSnapshot), txn)
}

// SetTxCacheItem mocks base method
func (m *MockDatabaseIface) SetTxCacheItem(txn *v2.Txn, height uint32, txHash, tx []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTxCacheItem", txn, height, txHash, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTxCacheItem indicates an expected call of SetTxCacheItem
func (mr *MockDatabaseIfaceMockRecorder) SetTxCacheItem(txn, height, txHash, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTxCacheItem", reflect.TypeOf((*MockDatabaseIface)(nil).SetTxCacheItem), txn, height, txHash, tx)
}

// GetTxCacheItem mocks base method
func (m *MockDatabaseIface) GetTxCacheItem(txn *v2.Txn, height uint32, txHash []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxCacheItem", txn, height, txHash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxCacheItem indicates an expected call of GetTxCacheItem
func (mr *MockDatabaseIfaceMockRecorder) GetTxCacheItem(txn, height, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxCacheItem", reflect.TypeOf((*MockDatabaseIface)(nil).GetTxCacheItem), txn, height, txHash)
}

// TxCacheDropBefore mocks base method
func (m *MockDatabaseIface) TxCacheDropBefore(txn *v2.Txn, beforeHeight uint32, maxKeys int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxCacheDropBefore", txn, beforeHeight, maxKeys)
	ret0, _ := ret[0].(error)
	return ret0
}

// TxCacheDropBefore indicates an expected call of TxCacheDropBefore
func (mr *MockDatabaseIfaceMockRecorder) TxCacheDropBefore(txn, beforeHeight, maxKeys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxCacheDropBefore", reflect.TypeOf((*MockDatabaseIface)(nil).TxCacheDropBefore), txn, beforeHeight, maxKeys)
}

// GetTxCacheSet mocks base method
func (m *MockDatabaseIface) GetTxCacheSet(txn *v2.Txn, height uint32) ([][]byte, [][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxCacheSet", txn, height)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].([][]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTxCacheSet indicates an expected call of GetTxCacheSet
func (mr *MockDatabaseIfaceMockRecorder) GetTxCacheSet(txn, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxCacheSet", reflect.TypeOf((*MockDatabaseIface)(nil).GetTxCacheSet), txn, height)
}

// DropPendingHdrNodeKeys mocks base method
func (m *MockDatabaseIface) DropPendingHdrNodeKeys() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropPendingHdrNodeKeys")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropPendingHdrNodeKeys indicates an expected call of DropPendingHdrNodeKeys
func (mr *MockDatabaseIfaceMockRecorder) DropPendingHdrNodeKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropPendingHdrNodeKeys", reflect.TypeOf((*MockDatabaseIface)(nil).DropPendingHdrNodeKeys))
}

// SetPendingHdrNodeKey mocks base method
func (m *MockDatabaseIface) SetPendingHdrNodeKey(txn *v2.Txn, nodeKey []byte, layer int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPendingHdrNodeKey", txn, nodeKey, layer)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPendingHdrNodeKey indicates an expected call of SetPendingHdrNodeKey
func (mr *MockDatabaseIfaceMockRecorder) SetPendingHdrNodeKey(txn, nodeKey, layer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPendingHdrNodeKey", reflect.TypeOf((*MockDatabaseIface)(nil).SetPendingHdrNodeKey), txn, nodeKey, layer)
}

// GetPendingHdrNodeKey mocks base method
func (m *MockDatabaseIface) GetPendingHdrNodeKey(txn *v2.Txn, nodeKey []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingHdrNodeKey", txn, nodeKey)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingHdrNodeKey indicates an expected call of GetPendingHdrNodeKey
func (mr *MockDatabaseIfaceMockRecorder) GetPendingHdrNodeKey(txn, nodeKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingHdrNodeKey", reflect.TypeOf((*MockDatabaseIface)(nil).GetPendingHdrNodeKey), txn, nodeKey)
}

// DeletePendingHdrNodeKey mocks base method
func (m *MockDatabaseIface) DeletePendingHdrNodeKey(txn *v2.Txn, nodeKey []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePendingHdrNodeKey", txn, nodeKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePendingHdrNodeKey indicates an expected call of DeletePendingHdrNodeKey
func (mr *MockDatabaseIfaceMockRecorder) DeletePendingHdrNodeKey(txn, nodeKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingHdrNodeKey", reflect.TypeOf((*MockDatabaseIface)(nil).DeletePendingHdrNodeKey), txn, nodeKey)
}

// CountPendingHdrNodeKeys mocks base method
func (m *MockDatabaseIface) CountPendingHdrNodeKeys(txn *v2.Txn) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPendingHdrNodeKeys", txn)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPendingHdrNodeKeys indicates an expected call of CountPendingHdrNodeKeys
func (mr *MockDatabaseIfaceMockRecorder) CountPendingHdrNodeKeys(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPendingHdrNodeKeys", reflect.TypeOf((*MockDatabaseIface)(nil).CountPendingHdrNodeKeys), txn)
}

// GetPendingHdrNodeKeysIter mocks base method
func (m *MockDatabaseIface) GetPendingHdrNodeKeysIter(txn *v2.Txn) *PendingHdrNodeIter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingHdrNodeKeysIter", txn)
	ret0, _ := ret[0].(*PendingHdrNodeIter)
	return ret0
}

// GetPendingHdrNodeKeysIter indicates an expected call of GetPendingHdrNodeKeysIter
func (mr *MockDatabaseIfaceMockRecorder) GetPendingHdrNodeKeysIter(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingHdrNodeKeysIter", reflect.TypeOf((*MockDatabaseIface)(nil).GetPendingHdrNodeKeysIter), txn)
}

// DropPendingNodeKeys mocks base method
func (m *MockDatabaseIface) DropPendingNodeKeys() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropPendingNodeKeys")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropPendingNodeKeys indicates an expected call of DropPendingNodeKeys
func (mr *MockDatabaseIfaceMockRecorder) DropPendingNodeKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropPendingNodeKeys", reflect.TypeOf((*MockDatabaseIface)(nil).DropPendingNodeKeys))
}

// SetPendingNodeKey mocks base method
func (m *MockDatabaseIface) SetPendingNodeKey(txn *v2.Txn, nodeKey []byte, layer int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPendingNodeKey", txn, nodeKey, layer)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPendingNodeKey indicates an expected call of SetPendingNodeKey
func (mr *MockDatabaseIfaceMockRecorder) SetPendingNodeKey(txn, nodeKey, layer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPendingNodeKey", reflect.TypeOf((*MockDatabaseIface)(nil).SetPendingNodeKey), txn, nodeKey, layer)
}

// GetPendingNodeKey mocks base method
func (m *MockDatabaseIface) GetPendingNodeKey(txn *v2.Txn, nodeKey []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingNodeKey", txn, nodeKey)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingNodeKey indicates an expected call of GetPendingNodeKey
func (mr *MockDatabaseIfaceMockRecorder) GetPendingNodeKey(txn, nodeKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingNodeKey", reflect.TypeOf((*MockDatabaseIface)(nil).GetPendingNodeKey), txn, nodeKey)
}

// DeletePendingNodeKey mocks base method
func (m *MockDatabaseIface) DeletePendingNodeKey(txn *v2.Txn, nodeKey []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePendingNodeKey", txn, nodeKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePendingNodeKey indicates an expected call of DeletePendingNodeKey
func (mr *MockDatabaseIfaceMockRecorder) DeletePendingNodeKey(txn, nodeKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingNodeKey", reflect.TypeOf((*MockDatabaseIface)(nil).DeletePendingNodeKey), txn, nodeKey)
}

// CountPendingNodeKeys mocks base method
func (m *MockDatabaseIface) CountPendingNodeKeys(txn *v2.Txn) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPendingNodeKeys", txn)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPendingNodeKeys indicates an expected call of CountPendingNodeKeys
func (mr *MockDatabaseIfaceMockRecorder) CountPendingNodeKeys(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPendingNodeKeys", reflect.TypeOf((*MockDatabaseIface)(nil).CountPendingNodeKeys), txn)
}

// GetPendingNodeKeysIter mocks base method
func (m *MockDatabaseIface) GetPendingNodeKeysIter(txn *v2.Txn) *PendingNodeIter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingNodeKeysIter", txn)
	ret0, _ := ret[0].(*PendingNodeIter)
	return ret0
}

// GetPendingNodeKeysIter indicates an expected call of GetPendingNodeKeysIter
func (mr *MockDatabaseIfaceMockRecorder) GetPendingNodeKeysIter(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingNodeKeysIter", reflect.TypeOf((*MockDatabaseIface)(nil).GetPendingNodeKeysIter), txn)
}

// DropPendingLeafKeys mocks base method
func (m *MockDatabaseIface) DropPendingLeafKeys() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropPendingLeafKeys")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropPendingLeafKeys indicates an expected call of DropPendingLeafKeys
func (mr *MockDatabaseIfaceMockRecorder) DropPendingLeafKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropPendingLeafKeys", reflect.TypeOf((*MockDatabaseIface)(nil).DropPendingLeafKeys))
}

// SetPendingLeafKey mocks base method
func (m *MockDatabaseIface) SetPendingLeafKey(txn *v2.Txn, leafKey, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPendingLeafKey", txn, leafKey, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPendingLeafKey indicates an expected call of SetPendingLeafKey
func (mr *MockDatabaseIfaceMockRecorder) SetPendingLeafKey(txn, leafKey, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPendingLeafKey", reflect.TypeOf((*MockDatabaseIface)(nil).SetPendingLeafKey), txn, leafKey, value)
}

// GetPendingLeafKey mocks base method
func (m *MockDatabaseIface) GetPendingLeafKey(txn *v2.Txn, leafKey []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingLeafKey", txn, leafKey)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingLeafKey indicates an expected call of GetPendingLeafKey
func (mr *MockDatabaseIfaceMockRecorder) GetPendingLeafKey(txn, leafKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingLeafKey", reflect.TypeOf((*MockDatabaseIface)(nil).GetPendingLeafKey), txn, leafKey)
}

// DeletePendingLeafKey mocks base method
func (m *MockDatabaseIface) DeletePendingLeafKey(txn *v2.Txn, leafKey []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePendingLeafKey", txn, leafKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePendingLeafKey indicates an expected call of DeletePendingLeafKey
func (mr *MockDatabaseIfaceMockRecorder) DeletePendingLeafKey(txn, leafKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingLeafKey", reflect.TypeOf((*MockDatabaseIface)(nil).DeletePendingLeafKey), txn, leafKey)
}

// CountPendingLeafKeys mocks base method
func (m *MockDatabaseIface) CountPendingLeafKeys(txn *v2.Txn) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPendingLeafKeys", txn)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPendingLeafKeys indicates an expected call of CountPendingLeafKeys
func (mr *MockDatabaseIfaceMockRecorder) CountPendingLeafKeys(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPendingLeafKeys", reflect.TypeOf((*MockDatabaseIface)(nil).CountPendingLeafKeys), txn)
}

// GetPendingLeafKeysIter mocks base method
func (m *MockDatabaseIface) GetPendingLeafKeysIter(txn *v2.Txn) *PendingLeafIter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingLeafKeysIter", txn)
	ret0, _ := ret[0].(*PendingLeafIter)
	return ret0
}

// GetPendingLeafKeysIter indicates an expected call of GetPendingLeafKeysIter
func (mr *MockDatabaseIfaceMockRecorder) GetPendingLeafKeysIter(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingLeafKeysIter", reflect.TypeOf((*MockDatabaseIface)(nil).GetPendingLeafKeysIter), txn)
}

// SetSafeToProceed mocks base method
func (m *MockDatabaseIface) SetSafeToProceed(txn *v2.Txn, height uint32, isSafe bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSafeToProceed", txn, height, isSafe)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSafeToProceed indicates an expected call of SetSafeToProceed
func (mr *MockDatabaseIfaceMockRecorder) SetSafeToProceed(txn, height, isSafe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSafeToProceed", reflect.TypeOf((*MockDatabaseIface)(nil).SetSafeToProceed), txn, height, isSafe)
}

// GetSafeToProceed mocks base method
func (m *MockDatabaseIface) GetSafeToProceed(txn *v2.Txn, height uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSafeToProceed", txn, height)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSafeToProceed indicates an expected call of GetSafeToProceed
func (mr *MockDatabaseIfaceMockRecorder) GetSafeToProceed(txn, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSafeToProceed", reflect.TypeOf((*MockDatabaseIface)(nil).GetSafeToProceed), txn, height)
}

// ContainsSnapShotHdrNode mocks base method
func (m *MockDatabaseIface) ContainsSnapShotHdrNode(txn *v2.Txn, root []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainsSnapShotHdrNode", txn, root)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainsSnapShotHdrNode indicates an expected call of ContainsSnapShotHdrNode
func (mr *MockDatabaseIfaceMockRecorder) ContainsSnapShotHdrNode(txn, root interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainsSnapShotHdrNode", reflect.TypeOf((*MockDatabaseIface)(nil).ContainsSnapShotHdrNode), txn, root)
}

// GetSnapShotHdrNode mocks base method
func (m *MockDatabaseIface) GetSnapShotHdrNode(txn *v2.Txn, root []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapShotHdrNode", txn, root)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapShotHdrNode indicates an expected call of GetSnapShotHdrNode
func (mr *MockDatabaseIfaceMockRecorder) GetSnapShotHdrNode(txn, root interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapShotHdrNode", reflect.TypeOf((*MockDatabaseIface)(nil).GetSnapShotHdrNode), txn, root)
}

// SetSnapShotHdrNode mocks base method
func (m *MockDatabaseIface) SetSnapShotHdrNode(txn *v2.Txn, batch, root []byte, layer int) ([][]byte, int, []badgerTrie.LeafNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSnapShotHdrNode", txn, batch, root, layer)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].([]badgerTrie.LeafNode)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// SetSnapShotHdrNode indicates an expected call of SetSnapShotHdrNode
func (mr *MockDatabaseIfaceMockRecorder) SetSnapShotHdrNode(txn, batch, root, layer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSnapShotHdrNode", reflect.TypeOf((*MockDatabaseIface)(nil).SetSnapShotHdrNode), txn, batch, root, layer)
}

// DropPendingHdrLeafKeys mocks base method
func (m *MockDatabaseIface) DropPendingHdrLeafKeys() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropPendingHdrLeafKeys")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropPendingHdrLeafKeys indicates an expected call of DropPendingHdrLeafKeys
func (mr *MockDatabaseIfaceMockRecorder) DropPendingHdrLeafKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropPendingHdrLeafKeys", reflect.TypeOf((*MockDatabaseIface)(nil).DropPendingHdrLeafKeys))
}

// SetPendingHdrLeafKey mocks base method
func (m *MockDatabaseIface) SetPendingHdrLeafKey(txn *v2.Txn, hdrLeafKey, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPendingHdrLeafKey", txn, hdrLeafKey, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPendingHdrLeafKey indicates an expected call of SetPendingHdrLeafKey
func (mr *MockDatabaseIfaceMockRecorder) SetPendingHdrLeafKey(txn, hdrLeafKey, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPendingHdrLeafKey", reflect.TypeOf((*MockDatabaseIface)(nil).SetPendingHdrLeafKey), txn, hdrLeafKey, value)
}

// GetPendingHdrLeafKey mocks base method
func (m *MockDatabaseIface) GetPendingHdrLeafKey(txn *v2.Txn, hdrLeafKey []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingHdrLeafKey", txn, hdrLeafKey)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingHdrLeafKey indicates an expected call of GetPendingHdrLeafKey
func (mr *MockDatabaseIfaceMockRecorder) GetPendingHdrLeafKey(txn, hdrLeafKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingHdrLeafKey", reflect.TypeOf((*MockDatabaseIface)(nil).GetPendingHdrLeafKey), txn, hdrLeafKey)
}

// DeletePendingHdrLeafKey mocks base method
func (m *MockDatabaseIface) DeletePendingHdrLeafKey(txn *v2.Txn, hdrLeafKey []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePendingHdrLeafKey", txn, hdrLeafKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePendingHdrLeafKey indicates an expected call of DeletePendingHdrLeafKey
func (mr *MockDatabaseIfaceMockRecorder) DeletePendingHdrLeafKey(txn, hdrLeafKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingHdrLeafKey", reflect.TypeOf((*MockDatabaseIface)(nil).DeletePendingHdrLeafKey), txn, hdrLeafKey)
}

// CountPendingHdrLeafKeys mocks base method
func (m *MockDatabaseIface) CountPendingHdrLeafKeys(txn *v2.Txn) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPendingHdrLeafKeys", txn)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPendingHdrLeafKeys indicates an expected call of CountPendingHdrLeafKeys
func (mr *MockDatabaseIfaceMockRecorder) CountPendingHdrLeafKeys(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPendingHdrLeafKeys", reflect.TypeOf((*MockDatabaseIface)(nil).CountPendingHdrLeafKeys), txn)
}

// GetPendingHdrLeafKeysIter mocks base method
func (m *MockDatabaseIface) GetPendingHdrLeafKeysIter(txn *v2.Txn) *PendingHdrLeafIter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingHdrLeafKeysIter", txn)
	ret0, _ := ret[0].(*PendingHdrLeafIter)
	return ret0
}

// GetPendingHdrLeafKeysIter indicates an expected call of GetPendingHdrLeafKeysIter
func (mr *MockDatabaseIfaceMockRecorder) GetPendingHdrLeafKeysIter(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingHdrLeafKeysIter", reflect.TypeOf((*MockDatabaseIface)(nil).GetPendingHdrLeafKeysIter), txn)
}

// DropStagedBlockHeaderKeys mocks base method
func (m *MockDatabaseIface) DropStagedBlockHeaderKeys() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropStagedBlockHeaderKeys")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropStagedBlockHeaderKeys indicates an expected call of DropStagedBlockHeaderKeys
func (mr *MockDatabaseIfaceMockRecorder) DropStagedBlockHeaderKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropStagedBlockHeaderKeys", reflect.TypeOf((*MockDatabaseIface)(nil).DropStagedBlockHeaderKeys))
}

// SetStagedBlockHeader mocks base method
func (m *MockDatabaseIface) SetStagedBlockHeader(txn *v2.Txn, height uint32, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStagedBlockHeader", txn, height, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStagedBlockHeader indicates an expected call of SetStagedBlockHeader
func (mr *MockDatabaseIfaceMockRecorder) SetStagedBlockHeader(txn, height, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStagedBlockHeader", reflect.TypeOf((*MockDatabaseIface)(nil).SetStagedBlockHeader), txn, height, value)
}

// GetStagedBlockHeader mocks base method
func (m *MockDatabaseIface) GetStagedBlockHeader(txn *v2.Txn, height uint32) (*objs.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStagedBlockHeader", txn, height)
	ret0, _ := ret[0].(*objs.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStagedBlockHeader indicates an expected call of GetStagedBlockHeader
func (mr *MockDatabaseIfaceMockRecorder) GetStagedBlockHeader(txn, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStagedBlockHeader", reflect.TypeOf((*MockDatabaseIface)(nil).GetStagedBlockHeader), txn, height)
}

// DeleteStagedBlockHeaderKey mocks base method
func (m *MockDatabaseIface) DeleteStagedBlockHeaderKey(txn *v2.Txn, height uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStagedBlockHeaderKey", txn, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStagedBlockHeaderKey indicates an expected call of DeleteStagedBlockHeaderKey
func (mr *MockDatabaseIfaceMockRecorder) DeleteStagedBlockHeaderKey(txn, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStagedBlockHeaderKey", reflect.TypeOf((*MockDatabaseIface)(nil).DeleteStagedBlockHeaderKey), txn, height)
}

// CountStagedBlockHeaderKeys mocks base method
func (m *MockDatabaseIface) CountStagedBlockHeaderKeys(txn *v2.Txn) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountStagedBlockHeaderKeys", txn)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountStagedBlockHeaderKeys indicates an expected call of CountStagedBlockHeaderKeys
func (mr *MockDatabaseIfaceMockRecorder) CountStagedBlockHeaderKeys(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountStagedBlockHeaderKeys", reflect.TypeOf((*MockDatabaseIface)(nil).CountStagedBlockHeaderKeys), txn)
}

// GetStagedBlockHeaderKeyIter mocks base method
func (m *MockDatabaseIface) GetStagedBlockHeaderKeyIter(txn *v2.Txn) *StagedBlockHeaderKeyIter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStagedBlockHeaderKeyIter", txn)
	ret0, _ := ret[0].(*StagedBlockHeaderKeyIter)
	return ret0
}

// GetStagedBlockHeaderKeyIter indicates an expected call of GetStagedBlockHeaderKeyIter
func (mr *MockDatabaseIfaceMockRecorder) GetStagedBlockHeaderKeyIter(txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStagedBlockHeaderKeyIter", reflect.TypeOf((*MockDatabaseIface)(nil).GetStagedBlockHeaderKeyIter), txn)
}
